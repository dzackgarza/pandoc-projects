/**
 * Converts a Markdown string into an HTML string for display in the webview.
 * Uses Pandoc with MathJax support.
 * @param markdown The source Markdown from the file.
 * @returns A promise that resolves to an HTML string.
 */
export declare function convertMarkdownToWebviewHtml(markdown: string): Promise<string>;
/**
 * Surgically cleans HTML from a contenteditable element before conversion.
 * The goal is to remove browser-specific artifacts without destroying semantic content.
 * @param html The raw HTML string from the webview.
 * @returns A cleaner HTML string.
 */
declare function cleanIncomingHtml(html: string): string;
/**
 * Post-processes Markdown generated by Pandoc to fix common formatting issues.
 * @param markdown The raw Markdown from Pandoc.
 * @returns Cleaned Markdown.
 */
declare function postProcessPandocMarkdown(markdown: string): string;
/**
 * Converts an HTML string to a Markdown string using Pandoc.
 * @param cleanedHtml A cleaned HTML string.
 * @returns A promise that resolves to a raw Markdown string.
 */
declare function pandocHtmlToRawMarkdown(cleanedHtml: string): Promise<string>;
export declare function convertWebviewHtmlToMarkdown(html: string): Promise<string>;
declare const _default: {
    convertMarkdownToWebviewHtml: typeof convertMarkdownToWebviewHtml;
    convertWebviewHtmlToMarkdown: typeof convertWebviewHtmlToMarkdown;
    _internals: {
        cleanIncomingHtml: typeof cleanIncomingHtml;
        postProcessPandocMarkdown: typeof postProcessPandocMarkdown;
        pandocHtmlToRawMarkdown: typeof pandocHtmlToRawMarkdown;
    };
};
export default _default;
